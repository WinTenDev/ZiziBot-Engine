@using System.Net
@using System.Security.Claims
@inherits WebComponentBase<ConsoleAuth>

@code {

    [Inject]
    protected CustomAuthenticationStateProvider CustomAuthenticationStateProvider { get; set; }

    [Inject]
    protected AuthenticationStateProvider AuthenticationStateProvider { get; set; }

    private ClaimsPrincipal? ClaimsPrincipal { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender)
            return;

        var sessionDto = NavigationManager.QueryString<TelegramSessionDto>();
        var validate = await sessionDto?.ValidateAsync<TelegramSessionDtoValidator, TelegramSessionDto>();
        if (!validate.IsValid)
        {
            Logger.LogDebug("URL contains no session payload, continue..");
            return;
        }

        var webResponse = await Mediator.Send(new CheckConsoleSessionRequest()
        {
            Model = sessionDto
        });

        if (webResponse.StatusCode != HttpStatusCode.OK)
        {
            NotificationService.Notify(NotificationSeverity.Warning, "Sesi tidak valid, Silahkan coba lagi");
            Logger.LogDebug("Session is invalid, continue..");
            return;
        }

        await ProtectedLocalStorage.SetAsync("bearer_token", webResponse.Result?.BearerToken);
        NotificationService.Notify(NotificationSeverity.Success, $"Selamat datang, {sessionDto.FirstName} {sessionDto.LastName}");

        var expireDate = DateTime.UtcNow.AddMonths(1);

        await JSRuntime.InvokeVoidAsync("eval", $"document.cookie='bearer_token={webResponse.Result?.BearerToken}; expires={expireDate:ddd, dd MMM yyyy}'");
        NavigationManager.NavigateTo("/", replace: true);


        await ValidateBearer();

        await InvokeAsync(StateHasChanged);

        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task ValidateBearer()
    {
        var bearerToken = await ProtectedLocalStorage.GetAsync<string>("bearer_token");

        if (bearerToken.Value == null)
        {
            Logger.LogWarning("Bearer is empty");

            return;
        }

        ClaimsPrincipal = ((CustomAuthenticationStateProvider)AuthenticationStateProvider).AuthenticateUser(bearerToken.Value);
    }

}