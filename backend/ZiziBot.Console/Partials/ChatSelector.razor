@using MediatR
@using Blazored.LocalStorage
@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using Microsoft.Extensions.Logging
<RadzenText>Pilih Obrolan:</RadzenText>
<RadzenListBox @bind-Value="SelectedChatId" Change="OnValueChanged" Data="ListChat" LoadData="OnLoadData" Style="width: 100%; height: calc(100% - 32px);" TextProperty="ChatTitle" ValueProperty="ChatId">
    <Template>
        @((context as ChatInfoDto).ChatTitle)
    </Template>
</RadzenListBox>

@code {
    [Inject]
    protected IMediator Mediator { get; set; }

    [Inject]
    protected ILocalStorageService LocalStorage { get; set; }

    [Inject]
    protected ProtectedLocalStorage ProtectedLocalStorage { get; set; }

    [Inject]
    protected ChatDbContext ChatDbContext { get; set; }

    [Inject]
    protected ChatSettingRepository ChatSettingRepository { get; set; }

    [Inject]
    protected ILogger<ChatSelector> Logger { get; set; }

    [Parameter]
    public long SelectedChatId { get; set; }

    [Parameter]
    public List<ChatInfoDto>? ListChat { get; set; }

    [Parameter]
    public Action<long> OnChatSelected { get; set; }

    [Parameter]
    public EventCallback<long> OnChatSelectedCallback { get; set; }

    private async Task OnValueChanged(object obj)
    {
        if (obj is not long chatInfoDto) return;

        await OnChatSelectedCallback.InvokeAsync(chatInfoDto);
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnLoadData(LoadDataArgs obj)
    {
        var bearerToken = await ProtectedLocalStorage.GetAsync<string>("bearer_token");
        if (bearerToken.Value == null)
            return;

        ListChat = await ChatSettingRepository.GetChatByBearerToken(bearerToken.Value);
        await InvokeAsync(StateHasChanged);
    }
}